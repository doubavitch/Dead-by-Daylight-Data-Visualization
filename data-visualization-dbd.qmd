---
title: "Dead by Daylight Data Visualization"
author: "Clara Duchossois"
date: "Winter Semester 2023-2024"
output: html_document
echo : false
---

We first load all the needed libraries, as well as the original data file

```{r}
library(tidyverse)
library(ggplot2)
library(readr)
library(dplyr)
library(broom)
library(forcats)
library(GGally)
dead_by_daylight <- read_csv('Dead by Daylight data.csv')
dead_by_daylight
theme_set(theme_bw())
```

## Repairs Density

```{r}
#ggplot() +
#geom_density(aes(x = dead_by_daylight$`# Finished generators`, fill = "", alpha = 0.3)) +
#geom_vline(aes(xintercept = mean(dead_by_daylight$`# Finished generators`), colour = ""), linewidth = 1, linetype = 'dashed') +
#labs(title = "Density of the number of repaired generators per match", x = "Repaired generators", y ="Density", colour = "Mean") +
#scale_alpha(guide = 'none') +
#guides(fill = 'none') +
#expand_limits(x = c(-1,6), y = c(0,0.65))
ggplot() +
  geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +  
  labs(title = "Number of repaired generators per match", x = "Repaired generators", y = "Count") +
  guides(fill = 'none') 
```

```{r}
#dead_by_daylight |> 
#ggplot() +
#geom_density(aes(x = dead_by_daylight$`# Finished generators`, fill = Season, alpha = 0.3)) +
#facet_wrap(~factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"))) +
#labs(title = "Density of the number of repaired generators per match per season", x = "Repaired generators", y ="Density") +
#scale_alpha(guide = 'none') +
#guides(fill = 'none') +
#expand_limits(x = c(-2,7), y = c(0,1))

dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +
facet_wrap(~factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"))) +
labs(title = "Number of repaired generators per match per season", x = "Repaired generators", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')
```

## Escape Density

```{r}
#ggplot() +
#geom_density(aes(x = dead_by_daylight$`# Escaped Survivors`, fill = "", alpha = 0.3)) +
#geom_vline(aes(xintercept = mean(dead_by_daylight$`# Escaped Survivors`), colour = ""), linewidth = 1, linetype = 'dashed') +
#labs(title = "Density of the number of escaped survivors per match", x = "Escaped survivors", y ="Density", colour = "Mean") +
#scale_alpha(guide = 'none') +
#guides(fill = 'none') +
#expand_limits(x = c(-1,5), y = c(0,0.65))

ggplot() +
  geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
  labs(title = "Number of escaped survivors per match", x = "Escaped survivors", y = "Count") +
  guides(fill = 'none') 
```

```{r}
#dead_by_daylight |> 
#ggplot() +
#geom_density(aes(x = dead_by_daylight$`# Escaped Survivors`, fill = Season, alpha = 0.3)) +
#facet_wrap(~factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"))) +
#labs(title = "Density of the number of escaped survivors per match per season", x = "Escaped survivors", y ="Density") +
#scale_alpha(guide = 'none') +
#guides(fill = 'none') +
#expand_limits(x = c(-2,7), y = c(0,1))

dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
facet_wrap(~factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"))) +
labs(title = "Number of escaped survivors per match per season", x = "Escaped survivors", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')
```

Let's have a look at our escape rates whenever 5 generators where repaired:

```{r}
DbD_5gens <- dead_by_daylight |> filter(`# Finished generators` == 5)

ggplot() +
geom_bar(aes(x = DbD_5gens$`# Escaped Survivors`), fill = "#9C2A23") +
labs(title = "Number of escaped survivors per match where 5 generators where repaired", x = "Escaped survivors", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')
```

## Escape and repair density depending on SBMM

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +
facet_wrap(~SBMM) +
labs(title = "Number of repaired generators per match depending on SBMM", x = "Repaired generators", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')
```

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
facet_wrap(~SBMM) +
labs(title = "Density of the number of escaped survivors per match depending on SBMM", x = "Escaped survivors", y ="Density") +
scale_alpha(guide = 'none') +
guides(fill = 'none') +
expand_limits(x = c(-1,5), y = c(0,0.7))
```

## Killer occurrences

```{r}
ggplot() +
  geom_bar(aes(y = fct_infreq(dead_by_daylight$Killer)), fill = "#9C2A23") +
  guides(fill = 'none') +
  labs(title = "Number of occurences of each killer", x = "Count", y ="Killer") 
```

## Map occurrences

```{r}
ggplot() +
  geom_bar(aes(y = fct_infreq(dead_by_daylight$Map)), fill = "#2E63A1") +
  guides(fill = 'none') +
  labs(title = "Number of occurences of each map", x = "Count", y ="Map") 
```

## Repairs and Escapes density per map

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
facet_wrap(~Map) +
labs(title = "Density of the number of escaped survivors per match per map", x = "Escaped survivors", y ="Count") +
guides(fill = 'none')
```

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +
facet_wrap(~Map) +
labs(title = "Density of the number of repaired generators per match per map", x = "Repaired generators", y ="Count") +
guides(fill = 'none')
```

## Gate escapes vs. Hatch escapes

```{r}
dead_by_daylight <-  mutate(dead_by_daylight, gate_escapes = `# Escaped Survivors` - `# Hatch escapes`)

ggplot() +
  geom_bar(aes(x = dead_by_daylight$gate_escapes), fill = "#9C2A23") +
  labs(title = "Number of survivors who escaped through the gates per match", x = "Number of survivors who escaped through the gates", y = "Count") +
  guides(fill = 'none') 

ggplot() +
  geom_bar(aes(x = dead_by_daylight$`# Hatch escapes` ), fill = "#9C2A23") +
  labs(title = "Number of survivors who escaped through the hatch per match", x = "Number of survivors who escaped through the hatch", y = "Count") +
  guides(fill = 'none') 
```
```{r}
DbD_1esc <- dead_by_daylight |> filter(`# Escaped Survivors` == 1)
DbD_1esc
#ggplot() +
  #geom_bar(aes(x = DbD_1esc$`# Hatch escapes`), fill = "#CC0000") +
  #labs(title = "Number of survivors who escaped through the hatch per match", x = "Number of survivors who escaped through the hatch", y = "Count") +
  #guides(fill = 'none') 

#DbD_1esc |>
#ggplot() +
#geom_bar(aes(y = species, fill = sex), position = "fill") +
#scale_x_continuous(labels = scales::percent, position = "top",
#expand = c(0, 0)) + labs(x = NULL, y = NULL)
```



## Hatch escapes depending on the killers

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(y = fct_infreq(Killer) , fill = dead_by_daylight$`# Hatch escapes`), fill = "#9C2A23") +
#facet_wrap(~Killer) +
labs(title = "Number of hatch escapes depending on the killer", x = "Number of hatch escapes", y ="Killer")
```

```{r}
hatch_frequency_killer <- dead_by_daylight |> 
  group_by(Killer) |> 
  summarise(TotalEncounters = n(),
            TotalHatchEscapes = sum(`# Hatch escapes`),
            Frequency = (TotalHatchEscapes / TotalEncounters))
hatch_frequency_killer

hatch_frequency_killer |> 
  ggplot() +
  geom_bar(aes(x = Frequency, y = fct_infreq(Killer, Frequency)), fill = "#9C2A23", stat = "identity", position = "dodge") +
  labs(title = "Hatch escape rates per killer", x = "Frequency of Hatch Escapes", y = "Killer")
```

## Hatch escapes depending on the maps

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(y = fct_infreq(Map) , fill = dead_by_daylight$`# Hatch escapes`), fill = "#2E63A1") +
#facet_wrap(~Killer) +
labs(title = "Number of hatch escapes depending on the map", x = "Number of hatch escapes", y ="Map")
```


```{r}
hatch_frequency_map <- dead_by_daylight |> 
  group_by(Map) |> 
  summarise(TotalEncounters = n(),
            TotalHatchEscapes = sum(`# Hatch escapes`),
            Frequency = (TotalHatchEscapes / TotalEncounters))
hatch_frequency_map

hatch_frequency_map |> 
  ggplot() +
  geom_bar(aes(x = Frequency, y = fct_infreq(Map, Frequency)), fill = "#2E63A1", stat = "identity", position = "dodge") +
  labs(title = "Hatch escape rates per map", x = "Frequency of Hatch Escapes", y = "Map")
```


## Relationship between repair rate and escape rate

```{r}
ggplot(dead_by_daylight, aes(x = `# Finished generators`, y = `# Escaped Survivors`)) +
  geom_point(colour = "darkgray") +
  geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, colour = "#9C2A23") +
  labs(x = "Repaired Generators",
       y = "Escaped Survivors",
       title = "Escape rate as a function of the repair rate")
```

## Relationship between repair rate and escape rate per map (small multiples)

```{r}
ggplot(dead_by_daylight, aes(x = `# Finished generators`, y = `# Escaped Survivors`)) +
  geom_point(colour = "darkgray") +
  geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, colour = "#2E63A1") +
  facet_wrap(~Map) +
  labs(x = "Repaired Generators",
       y = "Escaped Survivors",
       title = "Escape rate as a function of the repair rate per map")
```

## Relationship between repair rate and escape rate per killer (small multiples)

```{r}
ggplot(dead_by_daylight, aes(x = `# Finished generators`, y = `# Escaped Survivors`)) +
  geom_point(colour = "darkgray") +
  geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, colour = "#9C2A23") +
  facet_wrap(~Killer) +
  labs(x = "Repaired Generators",
       y = "Escaped Survivors",
       title = "Escape rate as a function of the repair rate per killer")

# Heat map with correlation factors!!
```

```{r}
cor_data <- dead_by_daylight |> 
  group_by(Map, Killer) |> 
  summarise(Correlation = cor(`# Finished generators`, `# Escaped Survivors`), .groups = 'drop') |> 
  complete(Map, Killer, fill = list(Correlation = NA))

ggplot(cor_data, aes(x = Map, y = Killer)) +
  geom_tile(aes(fill = Correlation)) +
  theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
  #scale_fill_continuous(na.value = '#6D6D6D') +
  scale_fill_gradient(low="#9C2A23", high="#2E63A1", na.value = '#6D6D6D') +
  labs(x = "Map",
       y = "Killer",
       title = "Correlation between the escape rate and the repair rate\nper killer and per map") +
  guides(fill = guide_colorbar(title = "Correlation", 
                               barwidth = 1, 
                               barheight = 8,
                               title.position = "top",
                               title.hjust = 0.5))

```


```{r}
#ggplot(dead_by_daylight, aes(x = `# Finished generators`, y = `# Escaped Survivors`)) +
  #geom_tile(aes(fill = Map)) +
  #theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
  #scale_fill_continuous(na.value = '#6D6D6D') +
  #scale_fill_gradient(low="#9C2A23", high="#2E63A1", na.value = '#6D6D6D') +
  #labs(x = "Map",
       #y = "Killer",
       #title = "Correlation between the escape rate and the repair rate\nper killer and per map") +
  #guides(fill = guide_colorbar(title = "Correlation", 
                               #barwidth = 1, 
                               #barheight = 8,
                               #title.position = "top",
                               #title.hjust = 0.5))
```



## Heatmap of the average escape rate per killer and per map
```{r}
mean_escapes <- dead_by_daylight |> 
  group_by(Map, Killer) |> 
  summarise(Mean = mean(`# Escaped Survivors`), .groups = 'drop') |> 
  complete(Map, Killer, fill = list(Mean = NA))

ggplot(mean_escapes, aes(x = Map, y = Killer)) +
  geom_tile(aes(fill = Mean)) +
  theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
  scale_fill_gradient(low="#9C2A23", high="#2E63A1", na.value = '#6D6D6D') +
  labs(x = "Map",
       y = "Killer",
       title = "Average escape rate per killer and per map",
       subtitle = "To be fixed, does not treat all NAs correctly")
```


```{r}
hatch_frequency <- dead_by_daylight |> 
  group_by(Map, Killer) |> 
  summarise(TotalEncounters = n(), TotalHatchEscapes = sum(`# Hatch escapes`), Frequency = (TotalHatchEscapes / TotalEncounters), .groups = 'drop') |> 
  complete(Map, Killer, fill = list(Frequency = NA))
hatch_frequency

ggplot(hatch_frequency, aes(x = Map, y = Killer)) +
  geom_tile(aes(fill = Frequency)) +
  theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
  #scale_fill_continuous(na.value = '#6D6D6D') +
  scale_fill_gradient(low="#9C2A23", high="#2E63A1", na.value = '#6D6D6D') +
  #labs(x = "Map",
       #y = "Killer",
       #title = "Correlation between the escape rate and the repair rate\nper killer and per map") +
  guides(fill = guide_colorbar(title = "Correlation", 
                               barwidth = 1, 
                               barheight = 8,
                               title.position = "top",
                               title.hjust = 0.5))
```


```{r}
#dead_by_daylight <- mutate(dead_by_daylight, Win = )
# if #escapes ≥ 2, win = true



# summarize hatchfrquency per map and per killer
#ggplot(dead_by_daylight,aes(x = Map, y = Killer)) +
  #geom_tile(aes(fill = `# Escaped Survivors`)) +
  #theme(axis.text.x=element_text(angle = 90, hjust = 0))

# fill should be average # escaped survivors
# fill could be count of wins per map and killer
# facet by SBMM ???

# heatmap to study hiw much each parameter influenced our results (SBMM...)
```



```{r}
#library(rayshader)
#dbd_1 <- ggplot(dead_by_daylight, aes(Map, Killer)) +
  #geom_raster(aes(fill = `# Escaped Survivors`)) +
  #ggtitle("3D Plotting in R from 2D_ggplot_graphics") +
  #labs(caption = "Package: rayshader", fill = "Escaped Survivors") +
  #theme(axis.text = element_text(size = 12), axis.text.x=element_text(angle = 90, hjust = 0), title = element_text(size = 12,face="bold"), panel.border= element_rect(size=2,color="black",fill=NA))  
#dbd_1

#plot_gg(dbd_1, multicore = TRUE, width = 8, height = 8, scale = 300, 
          #zoom = 0.6, phi = 60,
          #background = "#afceff",shadowcolor = "#3a4f70")


#Color Palette = #3C629C surv blue
#6D6D6D darkgray
#9C2A23 killer red

# original red #CC0000
```







