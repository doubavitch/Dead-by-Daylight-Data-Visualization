---
title: "Dead by Daylight Data Visualization - Exploratory"
author: "Clara Duchossois"
date: "Winter Semester 2023-2024"
output: html_document
echo : false
---

We first load all the needed libraries, as well as the original data file

```{r setup}
library(tidyverse)
library(ggplot2)
library(readr)
library(dplyr)
library(broom)
library(forcats)
library(GGally)
library(ggstats)
library(likert)
library(gganimate)
library(gridExtra)
library(HH)
library(stringr)
dead_by_daylight <- read_csv('Dead by Daylight data.csv')
dead_by_daylight
theme_set(theme_bw())
```

## Repairs Density

```{r}
ggplot() +
  geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +  
  labs(title = "Number of repaired generators per match", x = "Repaired generators", y = "Count") +
  guides(fill = 'none') 
```

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +
facet_wrap(~factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"))) +
labs(title = "Number of repaired generators per match per season", x = "Repaired generators", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')
```

## Escape Density

```{r}
ggplot() +
  geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
  labs(title = "Number of escaped survivors per match", x = "Escaped survivors", y = "Count") +
  guides(fill = 'none') 
```

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
facet_wrap(~factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"))) +
labs(title = "Number of escaped survivors per match per season", x = "Escaped survivors", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')
```

Let's have a look at our escape rates whenever 5 generators where repaired:

```{r}
DbD_5gens <- dead_by_daylight |> filter(`# Finished generators` == 5)

ggplot() +
geom_bar(aes(x = DbD_5gens$`# Escaped Survivors`), fill = "#9C2A23") +
labs(title = "Number of escaped survivors per match where 5 generators where repaired", x = "Escaped survivors", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')
```


```{r Escape and repair density depending on SBMM}
dead_by_daylight |>
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +
facet_wrap(~SBMM) +
labs(title = "Number of repaired generators per match depending on SBMM", x = "Repaired generators", y ="Count") +
scale_alpha(guide = 'none') +
guides(fill = 'none')

dead_by_daylight |>
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
facet_wrap(~SBMM) +
labs(title = "Density of the number of escaped survivors per match depending on SBMM", x = "Escaped survivors", y ="Density") +
scale_alpha(guide = 'none') +
guides(fill = 'none') +
expand_limits(x = c(-1,5), y = c(0,0.7))
```


## Map occurrences

```{r}
ggplot() +
  geom_bar(aes(y = fct_infreq(dead_by_daylight$Map)), fill = "#2E63A1") +
  guides(fill = 'none') +
  labs(title = "Number of occurences of each map", x = "Count", y ="Map") 
```

## Repairs and Escapes density per map

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Escaped Survivors`), fill = "#9C2A23") +
facet_wrap(~Map) +
labs(title = "Density of the number of escaped survivors per match per map", x = "Escaped survivors", y ="Count") +
guides(fill = 'none')
```

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(x = dead_by_daylight$`# Finished generators`), fill = "#2E63A1") +
facet_wrap(~Map) +
labs(title = "Density of the number of repaired generators per match per map", x = "Repaired generators", y ="Count") +
guides(fill = 'none')
```

## Gate escapes vs. Hatch escapes

```{r}
dead_by_daylight <-  mutate(dead_by_daylight, gate_escapes = `# Escaped Survivors` - `# Hatch escapes`)

ggplot() +
  geom_bar(aes(x = dead_by_daylight$gate_escapes), fill = "#9C2A23") +
  labs(title = "Number of survivors who escaped through the gates per match", x = "Number of survivors who escaped through the gates", y = "Count") +
  guides(fill = 'none') 

ggplot() +
  geom_bar(aes(x = dead_by_daylight$`# Hatch escapes` ), fill = "#9C2A23") +
  labs(title = "Number of survivors who escaped through the hatch per match", x = "Number of survivors who escaped through the hatch", y = "Count") +
  guides(fill = 'none') 
```
```{r}
DbD_1esc <- dead_by_daylight |> filter(`# Escaped Survivors` == 1)

ggplot() +
  geom_bar(aes(x = DbD_1esc$`# Hatch escapes`), fill = "#9C2A23") +
  labs(title = "Number of survivors who escaped through the hatch per match", x = "Number of survivors who escaped through the hatch", y = "Count") +
  guides(fill = 'none')
```



## Hatch escapes depending on the killers

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(y = fct_infreq(Killer) , fill = dead_by_daylight$`# Hatch escapes`), fill = "#9C2A23") +
labs(title = "Number of hatch escapes depending on the killer", x = "Number of hatch escapes", y ="Killer")
```

```{r}
hatch_frequency_killer <- dead_by_daylight |> 
  group_by(Killer) |> 
  summarise(TotalEncounters = n(),
            TotalHatchEscapes = sum(`# Hatch escapes`),
            Frequency = (TotalHatchEscapes / TotalEncounters))

hatch_frequency_killer |> 
  ggplot() +
  geom_bar(aes(x = Frequency, y = fct_infreq(Killer, Frequency)), fill = "#9C2A23", stat = "identity", position = "dodge") +
  labs(title = "Hatch escape rates per killer", x = "Frequency of Hatch Escapes", y = "Killer")
```

## Hatch escapes depending on the maps

```{r}
dead_by_daylight |> 
ggplot() +
geom_bar(aes(y = fct_infreq(Map) , fill = dead_by_daylight$`# Hatch escapes`), fill = "#2E63A1") +
labs(title = "Number of hatch escapes depending on the map", x = "Number of hatch escapes", y ="Map")
```


```{r}
hatch_frequency_map <- dead_by_daylight |> 
  group_by(Map) |> 
  summarise(TotalEncounters = n(),
            TotalHatchEscapes = sum(`# Hatch escapes`),
            Frequency = (TotalHatchEscapes / TotalEncounters))

hatch_frequency_map |> 
  ggplot() +
  geom_bar(aes(x = Frequency, y = fct_infreq(Map, Frequency)), fill = "#2E63A1", stat = "identity", position = "dodge") +
  labs(title = "Hatch escape rates per map", x = "Frequency of Hatch Escapes", y = "Map")
```


## Relationship between repair rate and escape rate

```{r Relationship between repair rate and escape rate}
ggplot(dead_by_daylight, aes(x = `# Finished generators`, y = `# Escaped Survivors`)) +
  geom_point(colour = "darkgray") +
  geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, colour = "#9C2A23") +
  labs(x = "Repaired Generators",
       y = "Escaped Survivors",
       title = "Escape rate as a function of the repair rate")
```



```{r Relationship between repair rate and escape rate per map (small multiples)}
ggplot(dead_by_daylight, aes(x = `# Finished generators`, y = `# Escaped Survivors`)) +
  geom_point(colour = "darkgray") +
  geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, colour = "#2E63A1") +
  facet_wrap(~Map) +
  labs(x = "Repaired Generators",
       y = "Escaped Survivors",
       title = "Escape rate as a function of the repair rate per map")
```



```{r Relationship between repair rate and escape rate per killer (small multiples)}
ggplot(dead_by_daylight, aes(x = `# Finished generators`, y = `# Escaped Survivors`)) +
  geom_point(colour = "darkgray") +
  geom_smooth(method = "lm", formula = 'y ~ x', se = FALSE, colour = "#9C2A23") +
  facet_wrap(~Killer) +
  labs(x = "Repaired Generators",
       y = "Escaped Survivors",
       title = "Escape rate as a function of the repair rate per killer")
```

```{r Heatmap}
cor_data <- dead_by_daylight |>
  group_by(Killer, Map) |>
  summarise(Correlation = cor(`# Finished generators`, `# Escaped Survivors`, method = "spearman"), .groups = 'drop') |> 
  complete(Map, Killer, fill = list(Correlation = NA)) # we choose spearman's correlation factor, as it more suited for ordinal data

ggplot(cor_data, aes(x = Map, y = Killer)) +
  geom_tile(aes(fill = Correlation)) +
  theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
  scale_fill_gradient2(low = "#9C2A23", mid = "white", high = "#2E63A1", midpoint = 0, na.value = '#6D6D6D') +
  labs(x = "Map",
       y = "Killer",
       title = "Correlation between the escape rate and the repair rate\nper killer and per map") +
  guides(fill = guide_colorbar(title = "Correlation",
                               barwidth = 1,
                               barheight = 8,
                               title.position = "top",
                               title.hjust = 0.5))
```

## Evolution of the escape rate

```{r}
esc_freq_season <- dead_by_daylight |> 
  group_by(Season) |> 
  summarise(TotalMatches = n(),
            TotalEscapes = sum(`# Escaped Survivors`),
            Frequency = (TotalEscapes / TotalMatches))

esc_freq_season |>
  ggplot() +
  geom_bar(aes(y = Frequency, x = factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January"))), fill = "#9C2A23", stat = "identity", position = "dodge") +
  labs(title = "Evolution of the escape rate throughout the year", y = "Escape rate", x = "Season")

esc_freq_season |> 
  ggplot(aes(y = Frequency, x = factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January")), group = 1)) +
  geom_point(colour = "#9C2A23", size = 2.2) +
  geom_line(colour = "#9C2A23", linewidth = 1) +
  scale_y_continuous(limits = c(0, max(esc_freq_season$Frequency) + 0.5)) +
  #geom_vline(xintercept = 4, linetype = "dashed", color = "#2E63A1", linewidth = 1) +
  geom_vline(aes(xintercept = 4, color = "SBMM"), linewidth = 0.7, linetype = "dashed") +
  scale_color_manual(name = "", values = c(SBMM = "#2E63A1")) +
  theme(axis.text.x=element_text(angle = 10)) +
  labs(title = "Evolution of the escape rate throughout the year", y = "Escape rate", x = "")

```

```{r}
esc_freq_season2 <- dead_by_daylight |>
  filter(Killer %in% c("Huntress", "Wraith", "Spirit", "Trapper")) |>
  group_by(Season, Killer) |>
  summarise(TotalMatches = n(), TotalEscapes = sum(`# Escaped Survivors`),
            Frequency = (TotalEscapes / TotalMatches), .groups = 'drop')

esc_freq_season2 |>
  ggplot(aes(y = Frequency, x = factor(Season, c("February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December", "January")), group = 1)) +
  geom_point(colour = "#9C2A23", size = 0) +
  geom_line(colour = "#9C2A23", linewidth = 0.3) +
  scale_y_continuous(limits = c(0, max(esc_freq_season$Frequency) + 0.5)) +
  facet_wrap(~Killer) +
  theme(axis.text.x=element_text(angle = 10)) +
  labs(title = "Evolution of the escape rate throughout the year", y = "Escape rate", x = "")
```


## Killer pick rate against performance

```{r Pick Rate vs. Performance side by side}
killer_perf <- dead_by_daylight |> 
  group_by(Killer) |> 
  summarise(kill_rate = mean(4 - `# Escaped Survivors`), killer_count = n(), .groups = 'drop')

killer_perf$DLC_type <- c('Original DLC', 'Original DLC', 'Franchise DLC', 'Franchise DLC', 'Original DLC', 'Original DLC', 'Franchise DLC', 'Original DLC', 'Franchise DLC', 'Franchise DLC', 'Original DLC', 'Base game', 'Base game', 'Original DLC', 'Franchise DLC', 'Franchise DLC', 'Base game', 'Original DLC', 'Franchise DLC', 'Original DLC', 'Franchise DLC', 'Original DLC', 'Base game', 'Original DLC', 'Original DLC', 'Base game')

pick_rate_plot <- ggplot(killer_perf, aes(x = killer_count, y = fct_infreq(Killer, killer_count))) +
  geom_bar(aes(fill = DLC_type), stat = "identity", position = "dodge") +
  geom_text(aes(label = killer_count), hjust = 1.2, nudge_x = -0.5, size = 2.7, colour = 'white') +
  scale_fill_manual(values = c("#9C2A23", "#a37d42", '#403b36'), name = 'Type of DLC', labels = c('Base game', 'Franchise DLC', 'Original DLC')) +
  labs(title = "Killer occurences", x = "Count", y = "Killer") +
  theme_classic() +
  theme(legend.position = c(0.8, 0.8),legend.direction = "vertical")

killer_performance_plot <- ggplot(killer_perf, aes(x = kill_rate, y = fct_infreq(Killer, kill_rate))) +
  geom_bar(aes(fill = DLC_type), stat = "identity", position = "dodge") +
  geom_text(aes(label = round(kill_rate, 2)), hjust = 0, nudge_x = -0.35, size = 2.7, colour = 'white') +
  scale_fill_manual(values = c('#9C2A23', "#a37d42", '#403b36')) +
  guides(fill='none') +
  labs(title = "Killer performances", x = "Average of killed survivors", y = '') +
  theme_classic()
  
grid.arrange(pick_rate_plot, killer_performance_plot, ncol=2)


## add pic of each killer for each bar
```


```{r}
kills_distribution <- dead_by_daylight |> 
  group_by(Killer, `# Escaped Survivors`) |> 
  summarise(Matches = n()) |> 
  group_by(Killer) |> 
  mutate(Percentage = (Matches / sum(Matches)) * 100) |> 
  pivot_wider(names_from = `# Escaped Survivors`, values_from = c(Matches, Percentage))

colnames(kills_distribution) <- c("Killer", "4K_Count", "3K_Count", "2K_Count", "1K_Count", "0K_Count", 
                                   "4K_Percentage", "3K_Percentage", "2K_Percentage", "1K_Percentage", "0K_Percentage")

kills_distrib_perc <- kills_distribution |>  dplyr::select(Killer, '4K_Percentage', '3K_Percentage', '2K_Percentage', '1K_Percentage', '0K_Percentage')


kills_distribution_long <- kills_distribution |> 
  pivot_longer(cols = '4K_Count':'0K_Percentage', 
               names_to = c("Kills", ".value"), 
               names_sep = "_")


ggplot(kills_distribution_long) +
  geom_bar(aes(y = Killer, x = Percentage, fill = factor(Kills)), stat = "identity", position = position_stack(reverse = TRUE)) +
  labs(title = "Distributions of the kills per killer",
       y = "Killer",
       x = "",
       fill = "Number of Kills") +
  scale_fill_manual(values = c("#e41a1c", "#377eb8", "#4daf4a", "#ff7f00", "#984ea3"))

```

```{r Likert plot}
likert_plot <- HH::likert(Killer ~ ., kills_distrib_perc, main="Distributions of the kills per killer", 
                          ylab= '', as.percent=TRUE, positive.order=TRUE, 
                          rightAxis = FALSE, 
                          trellis.par.set(background = list(col="transparent"), add.text = list(col = 'white'), axis.line = list(col= 'white'), axis.text = list(col = 'white'), par.main.text = list(col = "white"), par.xlab.text = list(col = 'white')), 
                          auto.key = list( columns = 1, space = 'right', text=c("4 kills","3 kills", "2 kills", "1 kill", "0 kill")), col=c("#5e1914", "#9C2A23", "darkgray", "#2E63A1", "#243b5e"))


png("likert_plot.png", bg = "transparent", width = 8, height = 5.2, units = 'in', res = 300)
print(likert_plot)
dev.off()
```

```{r}
# The goal here was to analyze, within the comments we left after each map, the behaviour of our teammates and the killers we faced. For this, we count the number of times we noted down an 'idiot' (within the team, or as a killer), how many times we faced a killer who tunneled, or who camped. All of those are of course signs of unsportsmanlike conduct, and made the match unpleasant for us.

library(waffle)

comments_bhvr <- dead_by_daylight |> 
  summarise(total_matches = n(),
            BM_count = sum(str_detect(replace_na(Comments, ''), regex("(idiot)|(tunnel)|(camp)", ignore_case = TRUE))),
            BM_perc = (BM_count / total_matches) * 100,
            idiot_count = sum(str_detect(replace_na(Comments, ''), regex("idiot", ignore_case = TRUE))),
            idiot_perc_tot = (idiot_count / total_matches) * 100,
            idiot_perc_bm = (idiot_count / BM_count) * 100,
            tunnel_count = sum(str_detect(replace_na(Comments, ''), regex("tunnel", ignore_case = TRUE))),
            tunnel_perc_tot = (tunnel_count / total_matches) * 100,
            tunnel_perc_bm = (tunnel_count / BM_count) * 100,
            camp_count = sum(str_detect(replace_na(Comments, ''), regex("camp", ignore_case = TRUE))),
            camp_perc_tot = (camp_count / total_matches) * 100,
            camp_perc_bm = (camp_count / BM_count) * 100)


BM_summary <- tibble(Type_of_BM = c("idiot", "tunnel", "camp"),
                     Count = c(comments_bhvr$idiot_count, comments_bhvr$tunnel_count, comments_bhvr$camp_count),
                     Percentage_total = c(comments_bhvr$idiot_perc_tot, comments_bhvr$tunnel_perc_tot, comments_bhvr$camp_perc_tot),
                     Percentage_BM = c(comments_bhvr$idiot_perc_bm, comments_bhvr$tunnel_perc_bm, comments_bhvr$camp_perc_bm))




idiot_data <- data.frame(category = c("Idiot", ""), value = c(round(comments_bhvr$idiot_perc_tot, digits = 0), 100 - round(comments_bhvr$idiot_perc_tot, digits = 0)))
tunnel_data <- data.frame(category = c("Tunnel", ""), value = c(round(comments_bhvr$tunnel_perc_tot, digits = 0), 100 - round(comments_bhvr$tunnel_perc_tot, digits = 0)))
camp_data <- data.frame(category = c("Camp", ""), value = c(round(comments_bhvr$camp_perc_tot, digits = 0), 100 - round(comments_bhvr$camp_perc_tot, digits = 0)))

idiot_plot <- waffle(idiot_data, rows = 10, size = 0.5, title = "Percentage of matches with an 'Idiot'", flip = TRUE)
tunnel_plot <- waffle(tunnel_data, rows = 10, size = 0.5, title = "Percentage of matches where the killer tunneled", flip = TRUE)
camp_plot <- waffle(camp_data, rows = 10, size = 0.5, title = "Percentage of matches where the killer camped", flip = TRUE)

idiot_plot
tunnel_plot
camp_plot


# In this plot, we tried to show the overall percentage of matches where we noted down Bad Manners (BM), and then within those matches with BM, show the proportion of each type of BM (idiot, tunnel or camp). Nevertheless this didn't work out, as the percentages of the various types of BM didn't add up to 100%, but more, as it is very common to witness both Tunnel and Camp within one match.
BM_plot <- ggplot(BM_summary, aes(fill = Type_of_BM, values = Percentage_total)) +
  geom_waffle(n_rows = 10, size = 0.33, colour = "white", flip = TRUE) +
  scale_fill_manual(name = NULL,
                    values = c("#BA182A", "#FF8288", "#FFDBDD"),
                    labels = c("Idiot", "Tunnel", "Camp")) +
  coord_equal() +
  theme_void()
BM_plot

# Those are some of the ideas we had in mind for this comment analysis:
# gather in one plot all the BM and total it up by the number of matches where we made a comment about any of those behaviors
# make a plot to compare good manners and BM and then a plot to analyse the distribution of each of those
# 3 plots
```

<!-- ## Heatmap of the average escape rate per killer and per map -->
```{r}
mean_escapes <- dead_by_daylight |>
  group_by(Map, Killer) |>
  summarise(Mean = mean(`# Escaped Survivors`), .groups = 'drop') |>
  complete(Map, Killer, fill = list(Mean = NA))

ggplot(mean_escapes, aes(x = Map, y = Killer)) +
  geom_tile(aes(fill = Mean)) +
  theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
  scale_fill_gradient(low="#9C2A23", high="#2E63A1", na.value = '#6D6D6D') +
  labs(x = "Map",
       y = "Killer",
       title = "Average escape rate per killer and per map",
       subtitle = "To be fixed, does not treat all NAs correctly")
```


```{r}
hatch_frequency <- dead_by_daylight |>
  group_by(Map, Killer) |>
  summarise(TotalEncounters = n(), TotalHatchEscapes = sum(`# Hatch escapes`), Frequency = (TotalHatchEscapes / TotalEncounters), .groups = 'drop') |>
  complete(Map, Killer, fill = list(Frequency = NA))

ggplot(hatch_frequency, aes(x = Map, y = Killer)) +
  geom_tile(aes(fill = Frequency)) +
  theme(axis.text.x=element_text(angle = 90, hjust = 0)) +
  scale_fill_gradient(low="#9C2A23", high="#2E63A1", na.value = '#6D6D6D') +
  labs(x = "Map",
       y = "Killer",
       title = "Hatch escape frequency per killer and per map") +
  guides(fill = guide_colorbar(title = "Correlation",
                               barwidth = 1,
                               barheight = 8,
                               title.position = "top",
                               title.hjust = 0.5))
```

